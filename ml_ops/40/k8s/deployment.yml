# proxy Pod1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy-pod1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy-pod
  template:
    metadata:
      labels:                   
        app: proxy-pod       
        version: proxy-pod-version1                     #
      annotations:                                      # Istio を使用するためのアノテーション（key: value 形式の metadata）
        sidecar.istio.io/inject: "true"                 # Istio の Envoy（プロキシサーバー）サイドカーの挿入を行うかフラグ
        sidecar.istio.io/proxyCPU: "128m"               # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU 量
        sidecar.istio.io/proxyMemory: "128Mi"           # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU メモリ
        proxy.istio.io/config: "{'concurrency':'1'}"    # Istio の Envoy（プロキシサーバー）サイドカーの並列スレッド数
    spec:
      containers:
      - name: proxy-container1
        image: gcr.io/my-project2-303004/proxy-image-gke:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http-server
        env:
          - name: PREDICT_SERVER_URL
            value: "http://predict-server1:5010"
        command: ["/bin/sh","-c"]
        args: ["gunicorn app:app --bind 0.0.0.0:5000 -w 1 -k uvicorn.workers.UvicornWorker --reload"]
        resources:
          limits:
            cpu: 500m
            memory: "300Mi"
---
# proxy Pod2
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy-pod2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy-pod
  template:
    metadata:
      labels:                   
        app: proxy-pod       
        version: proxy-pod-version2                                    #
      annotations:                                      # Istio を使用するためのアノテーション（key: value 形式の metadata）
        sidecar.istio.io/inject: "true"                 # Istio の Envoy（プロキシサーバー）サイドカーの挿入を行うかフラグ
        sidecar.istio.io/proxyCPU: "128m"               # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU 量
        sidecar.istio.io/proxyMemory: "128Mi"           # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU メモリ
        proxy.istio.io/config: "{'concurrency':'1'}"    # Istio の Envoy（プロキシサーバー）サイドカーの並列スレッド数
    spec:
      containers:
      - name: proxy-container2
        image: gcr.io/my-project2-303004/proxy-image-gke:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http-server
        env:
          - name: PREDICT_SERVER_URL
            value: "http://predict-server2:5011"
        command: ["/bin/sh","-c"]
        args: ["gunicorn app:app --bind 0.0.0.0:5000 -w 1 -k uvicorn.workers.UvicornWorker --reload"]
        resources:
          limits:
            cpu: 500m
            memory: "300Mi"
---
# 推論サーバー１
apiVersion: apps/v1
kind: Deployment
metadata:
  name: predict-pod1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: predict-pod1
  template:
    metadata:
      labels:                   
        app: predict-pod1       
      annotations:                                      # Istio を使用するためのアノテーション（key: value 形式の metadata）
        sidecar.istio.io/inject: "true"                 # Istio の Envoy（プロキシサーバー）サイドカーの挿入を行うかフラグ
        sidecar.istio.io/proxyCPU: "128m"               # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU 量
        sidecar.istio.io/proxyMemory: "128Mi"           # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU メモリ
        proxy.istio.io/config: "{'concurrency':'1'}"    # Istio の Envoy（プロキシサーバー）サイドカーの並列スレッド数
    spec:
      containers:
      - name: predict-container1
        image: gcr.io/my-project2-303004/predict-image-gke:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5010
          name: http-server
        env:
          - name: GRAB_CUT_ITERS
            value: "1"
        command: ["/bin/sh","-c"]
        args: ["gunicorn app:app --bind 0.0.0.0:5010 -w 1 -k uvicorn.workers.UvicornWorker --reload"]
        resources:
          limits:
            cpu: 500m
            memory: "300Mi"
---
# 推論サーバー２
apiVersion: apps/v1
kind: Deployment
metadata:
  name: predict-pod2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: predict-pod2
  template:
    metadata:
      labels:                   
        app: predict-pod2       
      annotations:                                      # Istio を使用するためのアノテーション（key: value 形式の metadata）
        sidecar.istio.io/inject: "true"                 # Istio の Envoy（プロキシサーバー）サイドカーの挿入を行うかフラグ
        sidecar.istio.io/proxyCPU: "128m"               # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU 量
        sidecar.istio.io/proxyMemory: "128Mi"           # Istio の Envoy（プロキシサーバー）サイドカーの使用 CPU メモリ
        proxy.istio.io/config: "{'concurrency':'1'}"    # Istio の Envoy（プロキシサーバー）サイドカーの並列スレッド数
    spec:
      containers:
      - name: predict-container2
        image: gcr.io/my-project2-303004/predict-image-gke:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5011
          name: http-server
        env:
          - name: GRAB_CUT_ITERS
            value: "10"
        command: ["/bin/sh","-c"]
        args: ["gunicorn app:app --bind 0.0.0.0:5011 -w 1 -k uvicorn.workers.UvicornWorker --reload"]
        resources:
          limits:
            cpu: 500m
            memory: "300Mi"
